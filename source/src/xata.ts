// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "appointments",
    checkConstraints: {
      appointments_xata_id_length_xata_id: {
        name: "appointments_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_appointments_xata_id_key: {
        name: "_pgroll_new_appointments_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "createdAt",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "email",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "fullName",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "lastReminderSentAt ",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "medium",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "phoneNumber",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "preferredDate",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "remark",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "reminderSent",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "status",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "updatedAt",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "{}",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "comments",
    checkConstraints: {
      comments_xata_id_length_xata_id: {
        name: "comments_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      comments_xata_text_length_content: {
        name: "comments_xata_text_length_content",
        columns: ["content"],
        definition: "CHECK ((octet_length(content) <= 204800))",
      },
      comments_xata_text_length_name: {
        name: "comments_xata_text_length_name",
        columns: ["name"],
        definition: "CHECK ((octet_length(name) <= 204800))",
      },
      comments_xata_text_length_parentId: {
        name: "comments_xata_text_length_parentId",
        columns: ["parentId"],
        definition: 'CHECK ((octet_length("parentId") <= 204800))',
      },
      comments_xata_text_length_postId: {
        name: "comments_xata_text_length_postId",
        columns: ["postId"],
        definition: 'CHECK ((octet_length("postId") <= 204800))',
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_comments_xata_id_key: {
        name: "_pgroll_new_comments_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "content",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "isHidden",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "likes",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "'0'::bigint",
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "parentId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "postId",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "donations",
    checkConstraints: {
      donations_xata_id_length_xata_id: {
        name: "donations_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      donations_xata_text_length_currency: {
        name: "donations_xata_text_length_currency",
        columns: ["currency"],
        definition: "CHECK ((octet_length(currency) <= 204800))",
      },
      donations_xata_text_length_donationType: {
        name: "donations_xata_text_length_donationType",
        columns: ["donationType"],
        definition: 'CHECK ((octet_length("donationType") <= 204800))',
      },
      donations_xata_text_length_donorEmail: {
        name: "donations_xata_text_length_donorEmail",
        columns: ["donorEmail"],
        definition: 'CHECK ((octet_length("donorEmail") <= 204800))',
      },
      donations_xata_text_length_donorName: {
        name: "donations_xata_text_length_donorName",
        columns: ["donorName"],
        definition: 'CHECK ((octet_length("donorName") <= 204800))',
      },
      donations_xata_text_length_donorPhone: {
        name: "donations_xata_text_length_donorPhone",
        columns: ["donorPhone"],
        definition: 'CHECK ((octet_length("donorPhone") <= 204800))',
      },
      donations_xata_text_length_notes: {
        name: "donations_xata_text_length_notes",
        columns: ["notes"],
        definition: "CHECK ((octet_length(notes) <= 204800))",
      },
      donations_xata_text_length_paymentMethod: {
        name: "donations_xata_text_length_paymentMethod",
        columns: ["paymentMethod"],
        definition: 'CHECK ((octet_length("paymentMethod") <= 204800))',
      },
      donations_xata_text_length_paymentStatus: {
        name: "donations_xata_text_length_paymentStatus",
        columns: ["paymentStatus"],
        definition: 'CHECK ((octet_length("paymentStatus") <= 204800))',
      },
      donations_xata_text_length_receiptUrl: {
        name: "donations_xata_text_length_receiptUrl",
        columns: ["receiptUrl"],
        definition: 'CHECK ((octet_length("receiptUrl") <= 204800))',
      },
      donations_xata_text_length_stripeChargeId: {
        name: "donations_xata_text_length_stripeChargeId",
        columns: ["stripeChargeId"],
        definition: 'CHECK ((octet_length("stripeChargeId") <= 204800))',
      },
      donations_xata_text_length_stripePaymentIntentId: {
        name: "donations_xata_text_length_stripePaymentIntentId",
        columns: ["stripePaymentIntentId"],
        definition: 'CHECK ((octet_length("stripePaymentIntentId") <= 204800))',
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_donations_stripePaymentIntentId_key: {
        name: "_pgroll_new_donations_stripePaymentIntentId_key",
        columns: ["stripePaymentIntentId"],
      },
      _pgroll_new_donations_xata_id_key: {
        name: "_pgroll_new_donations_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "amount",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "currency",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: "'USD'::text",
        comment: '{"xata.type":"text"}',
      },
      {
        name: "donationType",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "donorEmail",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "donorName",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "donorPhone",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "isRecurring",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "notes",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "paymentMethod",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "paymentStatus",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: "'pending'::text",
        comment: '{"xata.type":"text"}',
      },
      {
        name: "receiptUrl",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "stripeChargeId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "stripePaymentIntentId",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "stripeSubscriptionId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "donors",
    checkConstraints: {
      donors_xata_id_length_xata_id: {
        name: "donors_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      donors_xata_text_length_email: {
        name: "donors_xata_text_length_email",
        columns: ["email"],
        definition: "CHECK ((octet_length(email) <= 204800))",
      },
      donors_xata_text_length_name: {
        name: "donors_xata_text_length_name",
        columns: ["name"],
        definition: "CHECK ((octet_length(name) <= 204800))",
      },
      donors_xata_text_length_phone: {
        name: "donors_xata_text_length_phone",
        columns: ["phone"],
        definition: "CHECK ((octet_length(phone) <= 204800))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_donors_email_key: {
        name: "_pgroll_new_donors_email_key",
        columns: ["email"],
      },
      _pgroll_new_donors_xata_id_key: {
        name: "_pgroll_new_donors_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "lastDonationDate",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "phone",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "totalDonations",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "event_registration",
    checkConstraints: {
      event_registration_xata_id_length_xata_id: {
        name: "event_registration_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      event_registration_xata_text_length_email: {
        name: "event_registration_xata_text_length_email",
        columns: ["email"],
        definition: "CHECK ((octet_length(email) <= 204800))",
      },
      event_registration_xata_text_length_name: {
        name: "event_registration_xata_text_length_name",
        columns: ["name"],
        definition: "CHECK ((octet_length(name) <= 204800))",
      },
      event_registration_xata_text_length_paymentStatus: {
        name: "event_registration_xata_text_length_paymentStatus",
        columns: ["paymentStatus"],
        definition: 'CHECK ((octet_length("paymentStatus") <= 204800))',
      },
      event_registration_xata_text_length_stripePaymentIntentId: {
        name: "event_registration_xata_text_length_stripePaymentIntentId",
        columns: ["stripePaymentIntentId"],
        definition: 'CHECK ((octet_length("stripePaymentIntentId") <= 204800))',
      },
      event_registration_xata_text_length_stripeSessionId: {
        name: "event_registration_xata_text_length_stripeSessionId",
        columns: ["stripeSessionId"],
        definition: 'CHECK ((octet_length("stripeSessionId") <= 204800))',
      },
    },
    foreignKeys: {
      event_link: {
        name: "event_link",
        columns: ["event"],
        referencedTable: "events",
        referencedColumns: ["xata_id"],
        onDelete: "SET NULL",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_event_registration_xata_id_key: {
        name: "_pgroll_new_event_registration_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "createdAt",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue:
          "'2025-07-02 13:45:03.77591+00'::timestamp with time zone",
        comment: "",
      },
      {
        name: "email",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "event",
        type: "link",
        link: { table: "events" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.link":"events"}',
      },
      {
        name: "event_reg_id",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "formData",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "paymentStatus",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "'unpaid'::text",
        comment: '{"xata.type":"text"}',
      },
      {
        name: "stripePaymentIntentId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "stripeSessionId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "events",
    checkConstraints: {
      events_xata_id_length_xata_id: {
        name: "events_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      events_xata_text_length_ctaLink: {
        name: "events_xata_text_length_ctaLink",
        columns: ["ctaLink"],
        definition: 'CHECK ((octet_length("ctaLink") <= 204800))',
      },
      events_xata_text_length_ctaText: {
        name: "events_xata_text_length_ctaText",
        columns: ["ctaText"],
        definition: 'CHECK ((octet_length("ctaText") <= 204800))',
      },
      events_xata_text_length_currency: {
        name: "events_xata_text_length_currency",
        columns: ["currency"],
        definition: "CHECK ((octet_length(currency) <= 204800))",
      },
      events_xata_text_length_date: {
        name: "events_xata_text_length_date",
        columns: ["date"],
        definition: "CHECK ((octet_length(date) <= 204800))",
      },
      events_xata_text_length_description: {
        name: "events_xata_text_length_description",
        columns: ["description"],
        definition: "CHECK ((octet_length(description) <= 204800))",
      },
      events_xata_text_length_imageSrc: {
        name: "events_xata_text_length_imageSrc",
        columns: ["imageSrc"],
        definition: 'CHECK ((octet_length("imageSrc") <= 204800))',
      },
      events_xata_text_length_location: {
        name: "events_xata_text_length_location",
        columns: ["location"],
        definition: "CHECK ((octet_length(location) <= 204800))",
      },
      events_xata_text_length_stripePriceId: {
        name: "events_xata_text_length_stripePriceId",
        columns: ["stripePriceId"],
        definition: 'CHECK ((octet_length("stripePriceId") <= 204800))',
      },
      events_xata_text_length_time: {
        name: "events_xata_text_length_time",
        columns: ["time"],
        definition: 'CHECK ((octet_length("time") <= 204800))',
      },
      events_xata_text_length_title: {
        name: "events_xata_text_length_title",
        columns: ["title"],
        definition: "CHECK ((octet_length(title) <= 204800))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_events_expiresAt_key: {
        name: "_pgroll_new_events_expiresAt_key",
        columns: ["expiresAt"],
      },
      _pgroll_new_events_xata_id_key: {
        name: "_pgroll_new_events_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "capacity",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "ctaLink",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "ctaText",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "currency",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: "'USD'::text",
        comment: '{"xata.type":"text"}',
      },
      {
        name: "date",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "description",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "expiresAt",
        type: "datetime",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "formSchema",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "imageSrc",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "isPaidEvent",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "location",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "order",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "price",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: "'0'::double precision",
        comment: "",
      },
      {
        name: "requiresRSVP",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "stripePriceId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "time",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "title",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "faqs",
    checkConstraints: {
      faqs_xata_id_length_xata_id: {
        name: "faqs_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      faqs_xata_text_length_answer: {
        name: "faqs_xata_text_length_answer",
        columns: ["answer"],
        definition: "CHECK ((octet_length(answer) <= 204800))",
      },
      faqs_xata_text_length_faq_id: {
        name: "faqs_xata_text_length_faq_id",
        columns: ["faq_id"],
        definition: "CHECK ((octet_length(faq_id) <= 204800))",
      },
      faqs_xata_text_length_question: {
        name: "faqs_xata_text_length_question",
        columns: ["question"],
        definition: "CHECK ((octet_length(question) <= 204800))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_faqs_faq_id_key: {
        name: "_pgroll_new_faqs_faq_id_key",
        columns: ["faq_id"],
      },
      _pgroll_new_faqs_order_key: {
        name: "_pgroll_new_faqs_order_key",
        columns: ["order"],
      },
      _pgroll_new_faqs_question_key: {
        name: "_pgroll_new_faqs_question_key",
        columns: ["question"],
      },
      _pgroll_new_faqs_xata_id_key: {
        name: "_pgroll_new_faqs_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "answer",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "faq_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "order",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "question",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "updatedAt",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue:
          "'2025-07-01 06:56:05.40925+00'::timestamp with time zone",
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "likes",
    checkConstraints: {
      likes_xata_id_length_xata_id: {
        name: "likes_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      likes_xata_text_length_commentId: {
        name: "likes_xata_text_length_commentId",
        columns: ["commentId"],
        definition: 'CHECK ((octet_length("commentId") <= 204800))',
      },
      likes_xata_text_length_postId: {
        name: "likes_xata_text_length_postId",
        columns: ["postId"],
        definition: 'CHECK ((octet_length("postId") <= 204800))',
      },
      likes_xata_text_length_userId: {
        name: "likes_xata_text_length_userId",
        columns: ["userId"],
        definition: 'CHECK ((octet_length("userId") <= 204800))',
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_likes_xata_id_key: {
        name: "_pgroll_new_likes_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "commentId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "postId",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "userId",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "messages",
    checkConstraints: {
      messages_xata_id_length_xata_id: {
        name: "messages_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      messages_xata_text_length_email: {
        name: "messages_xata_text_length_email",
        columns: ["email"],
        definition: "CHECK ((octet_length(email) <= 204800))",
      },
      messages_xata_text_length_message_id: {
        name: "messages_xata_text_length_message_id",
        columns: ["message_id"],
        definition: "CHECK ((octet_length(message_id) <= 204800))",
      },
      messages_xata_text_length_name: {
        name: "messages_xata_text_length_name",
        columns: ["name"],
        definition: "CHECK ((octet_length(name) <= 204800))",
      },
      messages_xata_text_length_status: {
        name: "messages_xata_text_length_status",
        columns: ["status"],
        definition: "CHECK ((octet_length(status) <= 204800))",
      },
      messages_xata_text_length_subject: {
        name: "messages_xata_text_length_subject",
        columns: ["subject"],
        definition: "CHECK ((octet_length(subject) <= 204800))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_messages_message_id_key: {
        name: "_pgroll_new_messages_message_id_key",
        columns: ["message_id"],
      },
      _pgroll_new_messages_xata_id_key: {
        name: "_pgroll_new_messages_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue:
          "'2025-07-01 07:01:18.198073+00'::timestamp with time zone",
        comment: "",
      },
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "message",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "message_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "status",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: "'unread'::text",
        comment: '{"xata.type":"text"}',
      },
      {
        name: "subject",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "updatedAt",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue:
          "'2025-07-01 07:01:18.198073+00'::timestamp with time zone",
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "posts",
    checkConstraints: {
      posts_xata_id_length_xata_id: {
        name: "posts_xata_id_length_xata_id",
        columns: ["xata_id"],
        definition: "CHECK ((length(xata_id) < 256))",
      },
      posts_xata_multiple_length_categories: {
        name: "posts_xata_multiple_length_categories",
        columns: ["categories"],
        definition:
          "CHECK ((octet_length(array_to_string(categories, ''::text)) < 65536))",
      },
      posts_xata_text_length_content: {
        name: "posts_xata_text_length_content",
        columns: ["content"],
        definition: "CHECK ((octet_length(content) <= 204800))",
      },
      posts_xata_text_length_excerpt: {
        name: "posts_xata_text_length_excerpt",
        columns: ["excerpt"],
        definition: "CHECK ((octet_length(excerpt) <= 204800))",
      },
      posts_xata_text_length_featuredImage: {
        name: "posts_xata_text_length_featuredImage",
        columns: ["featuredImage"],
        definition: 'CHECK ((octet_length("featuredImage") <= 204800))',
      },
      posts_xata_text_length_metaTitle: {
        name: "posts_xata_text_length_metaTitle",
        columns: ["metaTitle"],
        definition: 'CHECK ((octet_length("metaTitle") <= 204800))',
      },
      posts_xata_text_length_metsDescription: {
        name: "posts_xata_text_length_metsDescription",
        columns: ["metsDescription"],
        definition: 'CHECK ((octet_length("metsDescription") <= 204800))',
      },
      posts_xata_text_length_post_id: {
        name: "posts_xata_text_length_post_id",
        columns: ["post_id"],
        definition: "CHECK ((octet_length(post_id) <= 204800))",
      },
      posts_xata_text_length_slug: {
        name: "posts_xata_text_length_slug",
        columns: ["slug"],
        definition: "CHECK ((octet_length(slug) <= 204800))",
      },
      posts_xata_text_length_status: {
        name: "posts_xata_text_length_status",
        columns: ["status"],
        definition: "CHECK ((octet_length(status) <= 204800))",
      },
      posts_xata_text_length_title: {
        name: "posts_xata_text_length_title",
        columns: ["title"],
        definition: "CHECK ((octet_length(title) <= 204800))",
      },
    },
    foreignKeys: {},
    primaryKey: [],
    uniqueConstraints: {
      _pgroll_new_posts_excerpt_key: {
        name: "_pgroll_new_posts_excerpt_key",
        columns: ["excerpt"],
      },
      _pgroll_new_posts_post_id_key: {
        name: "_pgroll_new_posts_post_id_key",
        columns: ["post_id"],
      },
      _pgroll_new_posts_xata_id_key: {
        name: "_pgroll_new_posts_xata_id_key",
        columns: ["xata_id"],
      },
    },
    columns: [
      {
        name: "categories",
        type: "multiple",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "commentCount",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "content",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue:
          "'2025-07-01 07:54:59.397953+00'::timestamp with time zone",
        comment: "",
      },
      {
        name: "excerpt",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "featuredImage",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "likes",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "metaTitle",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "metsDescription",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "post_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "publishDate",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue:
          "'2025-07-01 07:54:59.397953+00'::timestamp with time zone",
        comment: "",
      },
      {
        name: "slug",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "status",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "title",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: '{"xata.type":"text"}',
      },
      {
        name: "updatedAt",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue:
          "'2025-07-01 07:54:59.397953+00'::timestamp with time zone",
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: "('rec_'::text || (xata_private.xid())::text)",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Appointments = InferredTypes["appointments"];
export type AppointmentsRecord = Appointments & XataRecord;

export type Comments = InferredTypes["comments"];
export type CommentsRecord = Comments & XataRecord;

export type Donations = InferredTypes["donations"];
export type DonationsRecord = Donations & XataRecord;

export type Donors = InferredTypes["donors"];
export type DonorsRecord = Donors & XataRecord;

export type EventRegistration = InferredTypes["event_registration"];
export type EventRegistrationRecord = EventRegistration & XataRecord;

export type Events = InferredTypes["events"];
export type EventsRecord = Events & XataRecord;

export type Faqs = InferredTypes["faqs"];
export type FaqsRecord = Faqs & XataRecord;

export type Likes = InferredTypes["likes"];
export type LikesRecord = Likes & XataRecord;

export type Messages = InferredTypes["messages"];
export type MessagesRecord = Messages & XataRecord;

export type Posts = InferredTypes["posts"];
export type PostsRecord = Posts & XataRecord;

export type DatabaseSchema = {
  appointments: AppointmentsRecord;
  comments: CommentsRecord;
  donations: DonationsRecord;
  donors: DonorsRecord;
  event_registration: EventRegistrationRecord;
  events: EventsRecord;
  faqs: FaqsRecord;
  likes: LikesRecord;
  messages: MessagesRecord;
  posts: PostsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Efgbc-ssl-s-workspace-86ese1.us-east-1.xata.sh/db/efgbcssl",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
